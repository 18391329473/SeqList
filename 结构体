#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>     //预处理指令
#include<Stdlib.h>
#include<string.h>


//typedef struct Student   
//{
//	char name[1024];
//	int score;
//}Student;  //typedef 就是吧struct Student重命名为Student，这样下面定义变量student时就不用加struct

//struct Node   //结构体的自引用
//{
//	int data;
//	struct Node* n;
//}x;
//

//typedef struct s1
//{
//	char c1;   //c1和c2共同取成了四个字节
//	char c2;
//	int i;
//}s1;

#pragma pack(1)  //修改编译器内存的默认对齐数  要加的数最多加到默认对齐数
typedef struct s1
{
	double c1;    // double 是8个字节
	char c2;      // char和int共同占用了8个字节
	int i;        // 所以一共是8+8=16个字节
}s1;

typedef struct s2
{
	double a1;   //8       如果要对齐的内存值大于8，则取8
	struct s1;   //16       Linux中值默认为4，vs中默认为8
	int a2;      //8     
}s2;



int main()
{

	//内存对齐是为了硬件计算起来效率更高而设计的
	//printf("%d", sizeof(x));  // 8
	printf("%d\n", sizeof(s1));
	printf("%d\n", sizeof(struct s2));
	 
	s1 s1;   //定义了一个成员变量	
	printf("%p\n", &s1);
	printf("%p\n", &s1.c1);


	//Student student;// = { "yangcheng" ,20 }; //      struct Student student ； 定义了一个局部变量
	//strcpy(student.name, "yangcheng");
	//printf(" %s ", student.name);
    //printf(" %d\n", student.score);
	system("pause");
	return 0;
}
